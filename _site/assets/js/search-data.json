{"0": {
    "doc": "Basic Learning",
    "title": "Basic Learning",
    "content": "@SpringBootApplication 이란? Application 이 실행되면 아래 PetClinicApplication.java 코드의 main 함수가 실행된다. 그 전에 @SpringBootApplication 은 스프링부트를 자동으로 설정해주는 Annotation 이다. Spring 에 설정된 Class 들을 읽고 필터링하여 자동으로 Bean 으로 등록한다. SpringApplication.run() 함수는 내장 WAS 를 사용하여 Application 을 실행시켜주기 때문에 Tomcat 을 따로 설치할 필요가 없고, SpringBoot 로 만들어진 jar 파일로 실행시켜 주면 Application을 띄울 수 있다. // PetClinicApplication.java package org.springframework.samples.petclinic; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.ImportRuntimeHints; /** * PetClinic Spring Boot Application. */ @SpringBootApplication @ImportRuntimeHints(PetClinicRuntimeHints.class) public class PetClinicApplication { public static void main(String[] args) { SpringApplication.run(PetClinicApplication.class, args); } } . @ImportRuntimeHints 은 무엇일까? Spring Native Project 와 관련있는 Annotation 으로 GraalVM 을 이용하여 Native Image 로 컴파일을 돕는 도구이다. 거의 사용할 일은 없다하니, 나중에 필요할 때 깊이 알아보는게 좋을 것 같다. Native 의 뜻은 특정 하드웨어 또는 플랫폼에 종속되어 실행되는 프로그램을 의미한다. 대표적인 예로 React Native 가 있고, React 를 사용하여 모바일 디바이스 앱을 개발할때 사용하는 프레임워크이다. @Controller 는 class 위에 작성하며, 이 클래스는 Controller 라는 의미이다. @GetMapping 은 자원 접근 경로와 함께 function 위에 작성하며 접근 시 해당 func 로직을 수행한다. 리턴하는 문자열 값은 html 템플릿 경로가 담겨있는데, 해당 템플릿을 리턴된 데이터와 함께 결합하여 client 에 렌더링되는 html 페이지로 만들어준다. | 어떻게 templates 하위 경로에 위치한 html 을 찾을 수 있었을까? | .html 을 붙이지 않고 어떻게 원하는 파일을 찾을 수 있었을까? | . resources/templates 경로는 Thymeleaf 와 같은 템플릿 엔진을 사용할 때 default 경로이고, .html 로 끝나지 않아도 자동으로 인식을 한다. main |-- java |-- resources |-- templates |-- owners |--createOrUpdateOwnerForm ... import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; ... @Controller class OwnerController { ... private static final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = \"owners/createOrUpdateOwnerForm\"; ... @GetMapping(\"/owners/new\") public String initCreationForm(Map&lt;String, Object&gt; model) { Owner owner = new Owner(); model.put(\"owner\", owner); return VIEWS_OWNER_CREATE_OR_UPDATE_FORM; } ... } . ",
    "url": "/docs/Spring%20Framework/BasicLearning/",
    
    "relUrl": "/docs/Spring%20Framework/BasicLearning/"
  },"1": {
    "doc": "Concept",
    "title": "Concept",
    "content": " ",
    "url": "/docs/Spring%20Framework/Concept/",
    
    "relUrl": "/docs/Spring%20Framework/Concept/"
  },"2": {
    "doc": "Concept",
    "title": "IoC(Inversion of Control) 란?",
    "content": "한글로 번역하면 제어의 역전 이라는 뜻으로 풀이된다. 즉, 제어권이 나에게 있지 않고 상대로 뒤바껴있다는 뜻이다. 예를 들어, 클라이언트가 서버에게 요청을 보내면, Spring Framework 가 내부적으로 요청한 자원 경로에 해당하는 함수를 알아서 실행해주고, 아래 코드처럼 ownerId 값을 메소드의 인자로 넣어준 적이 없지만 Framework 에서 알아서 인자를 넣고 호출하여 준다. 또한, return 으로 html 파일명만을 적어줬을 뿐인데 Client 에 렌더링된 해당 html 을 전달해준다. @GetMapping(\"/owners/{ownerId}/edit\") public String initUpdateOwnerForm(@PathVariable(\"ownerId\") int ownerId, Model model) { Owner owner = this.owners.findById(ownerId); model.addAttribute(owner); return VIEWS_OWNER_CREATE_OR_UPDATE_FORM; } . 프레임워크와 라이브러리 이 둘의 차이점도 여기에 있다. 내가 직접 해당 코드를 실행시켜 흐름을 제어한다면 이건 라이브러리이지만 프레임워크는 내가 직접 호출을 수행하는 코드가 없고, 알아서 객체를 생성하고, 생명주기를 통제한다. Spring Framework 를 IoC 컨테이너라고 얘기하는데 여기서 컨테이너의 뜻은 빈(Bean) 을 관리하고 의존성을 처리하는 컴포넌트를 얘기한다. 스프링에서 빈(Bean) 그리고 의존성 처리를 사용자가 직접하지 않기 때문에 IoC 컨테이너라고 불리는 것 같다. 스프링 컨테이너에는 두 가지 유형으로 분류할 수 있는데 빈 팩토리(BeanFactory) 와 어플리케이션컨텍스트(ApplicationContext) 가 있다. 빈 팩토리(BeanFactory)는 딱 필요한 시점에만 빈(Bean) 을 생성하여 사용하기 때문에 효율적으로 자원을 사용한다. 실제로는 개발할 때 어플리케이션컨텍스트(ApplicationContext) 를 사용한다. 어플리케이션컨텍스트(ApplicationContext)는 필요한 시점이 아닌 미리 빈(Bean) 을 생성해둔다. 그 외에도 다양한 기능을 처리해 준다. AOP(Aspect-Oriented Programming), 이벤트 처리 등 많이 있지만 이것은 차차 알아가보려고 한다. ",
    "url": "/docs/Spring%20Framework/Concept/#iocinversion-of-control-%EB%9E%80",
    
    "relUrl": "/docs/Spring%20Framework/Concept/#iocinversion-of-control-란"
  },"3": {
    "doc": "Concept",
    "title": "POJO(Plain Old Java Object)란?",
    "content": " ",
    "url": "/docs/Spring%20Framework/Concept/#pojoplain-old-java-object%EB%9E%80",
    
    "relUrl": "/docs/Spring%20Framework/Concept/#pojoplain-old-java-object란"
  },"4": {
    "doc": "Concept",
    "title": "IoC의 분류",
    "content": "Dl(Dependency Lookup)과 DI(Dependency Injection) . ",
    "url": "/docs/Spring%20Framework/Concept/#ioc%EC%9D%98-%EB%B6%84%EB%A5%98",
    
    "relUrl": "/docs/Spring%20Framework/Concept/#ioc의-분류"
  },"5": {
    "doc": "Spring Framework",
    "title": "Spring Framework Summary",
    "content": " ",
    "url": "/docs/Spring%20Framework/#spring-framework-summary",
    
    "relUrl": "/docs/Spring%20Framework/#spring-framework-summary"
  },"6": {
    "doc": "Spring Framework",
    "title": "Spring Framework",
    "content": " ",
    "url": "/docs/Spring%20Framework/",
    
    "relUrl": "/docs/Spring%20Framework/"
  },"7": {
    "doc": "Configuration_sub_title_default",
    "title": "Configuration_sub_title_default",
    "content": " ",
    "url": "/docs/Spring%20Framework/default/",
    
    "relUrl": "/docs/Spring%20Framework/default/"
  },"8": {
    "doc": "Home",
    "title": "Home",
    "content": "JGSEO’s 개발과 관련된 내용을 정리하는 블로그입니다. ",
    "url": "/",
    
    "relUrl": "/"
  }
}
